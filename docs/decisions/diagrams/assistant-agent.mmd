classDiagram

    KernelAgent
    OpenAIAssistantDefinition
    OpenAIAssistantDefinition --> OpenAIExecutionSettings
    OpenAIExecutionSettings
    OpenAIExecutionSettings --> AssistantToolCallBehavior
    OpenAIServiceConfiguration
    OpenAIAssistantInvocationSettings
    OpenAIAssistantInvocationSettings --> AssistantToolCallBehavior
    OpenAIThreadCreationSettings

    KernelAgent <|-- OpenAIAssistantAgent
    OpenAIAssistantAgent ..> OpenAIServiceConfiguration
    OpenAIAssistantAgent ..> FileClient
    OpenAIAssistantAgent ..> VectorStoreClient
    OpenAIAssistantAgent -- OpenAIAssistantChannel
    OpenAIAssistantAgent --> OpenAIAssistantDefinition
    OpenAIAssistantAgent ..> OpenAIAssistantInvocationSettings
    OpenAIAssistantAgent ..> OpenAIThreadCreationSettings
    class OpenAIAssistantAgent {
        +OpenAIAssistantDefinition Definition
        +bool IsDeleted
        +RunPollingConfiguration Polling
        +Task~OpenAIAssistantAgent~ Create(Kernel kernel, OpenAIServiceConfiguration config, OpenAIAssistantDefinition definition)$
        +AsyncEnumerable~OpenAIAssistantDefinition~ ListDefinitions(OpenAIServiceConfiguration config)$
        +Task~OpenAIAssistantAgent~ Retrieve(Kernel kernel, OpenAIServiceConfiguration config, string id)$
        +FileClient CreateFileClient(OpenAIServiceConfiguration config)$
        +VectorStoreClient CreateVectorStoreClient(OpenAIServiceConfiguration config)$
        +Task~string~ CreateThread()
        +Task~string~ CreateThread(OpenAIThreadCreationSettings? settings)
        +Task~bool~ DeleteThread(string threadId)
        +Task AddChatMessage(string threadId, ChatMessageContent message)
        +AsyncEnumerable~ChatMessageContent~ GetThreadMessages(string threadId)
        +Task~bool~ Delete()
        +AsyncEnumerable~ChatMessageContent~ Invoke(string threadId)
        +AsyncEnumerable~ChatMessageContent~ Invoke(string threadId, OpenAIAssistantInvocationSettings? settings)
        #AsyncEnumerable~string~ GetChannelKeys()
        #Task~AgentChannel~ CreateChannel()
    }

    OpenAIAssistantChannel ..> OpenAIAssistantAgent
    class OpenAIAssistantChannel {
        #Task Receive(IReadOnlyList<ChatMessageContent> history)
        #AsyncEnumerable<ChatMessageContent> Invoke(OpenAIAssistantAgent agent)
        #AsyncEnumerable<ChatMessageContent> GetHistory()
    }

    class FileClient {
        <<OpenAI>>
    }

    class VectorStoreClient {
        <<OpenAI>>
    }
