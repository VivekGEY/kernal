---
title: Chat & Text Models
---
classDiagram
    %% Use https://mermaid.live/ to preview this diagram. The VS Code extension does not handle namespaces.
    direction LR

    namespace Microsoft_SemanticKernel {
        class ContentBase {
            <<abstract>>
            +InnerContent : Object
            +ModelId : String
            +Metadata : IDictionary
            +string(modelContent : ContentBase)
        }

        class StreamingContentBase {
            <<abstract>>
            +ChoiceIndex : Integer
            +InnerContent : Object
            +Metadata : IDictionary
            +ToString()
            +ToByteArray()
            +string(modelContent : StreamingContentBase)
        }
    }

    namespace Microsoft_SemanticKernel_TextGeneration {
        class TextContent {
            +Text : String
            +Encoding : Encoding
            +ToString()
        }

        class StreamingTextContent {
            +Text : String
            +Encoding : Encoding
            +ToString()
            +ToByteArray()
        }
    }

    namespace Microsoft_SemanticKernel_ChatCompletion {
        class ChatMessageContent {
            +Role : AuthorRole
            +Items : ChatMessageContentItem[]
            +Encoding : Encoding
            +ToString()
        }

        class ChatMessageContentItem {
            +Type : ChatMessageContentItemType
        }

        class StreamingChatMessageContent {
            +Content : String
            +Role : AuthorRole
            +Encoding : Encoding
            +ToString()
            +ToByteArray()
        }

        class ChatHistory {
            +AddMessage(chatMessageContent : ChatMessageContent)
            +AddMessage(authorRole : AuthorRole, item : ChatMessageContentItem, encoding : Encoding, metadata : IDictionary)
            +AddUserMessage(item : ChatMessageContentItem)
            +AddAssistantMessage(item : ChatMessageContentItem)
            +AddSystemMessage(item : ChatMessageContentItem)
        }

        class ChatMessageTextContentItem {
            +Text : String
        }

        class ChatMessageImageContentItem {
            Uri : Uri
        }
    }

    namespace Microsoft_SemanticKernel_Connectors_OpenAI {
        class OpenAIChatMessageContent {
            +FunctionCall : FunctionCall
            +Name : Name
            +GetOpenAIFunctionResponse()
        }

        class AzureOpenAIWithDataChatMessageContent {
            +ToolContent : String
        }

        class OpenAIStreamingTextContent {
            +ToByteArray()
            +ToString()
        }

        class OpenAIStreamingChatMessageContent {
            +Name : String
            +FunctionName : String
            +FunctionArgument : String
            +ToByteArray()
            +ToString()
            +GetOpenAIStreamingFunctionResponse(fullContent : OpenAIStreamingChatMessageContent[])
        }

        class AzureOpenAIWithDataStreamingChatMessageContent {
            +FunctionName : String
            +FunctionArgument : String
            -IsValidMessage(message : ChatWithDataStreamingMessage)
        }

        class OpenAIChatHistory {

        }
    }

    ContentBase <|-- TextContent
    ContentBase <|-- ChatMessageContent
    ChatMessageContent <|-- OpenAIChatMessageContent
    ChatMessageContent <|-- AzureOpenAIWithDataChatMessageContent
    StreamingContentBase <|-- StreamingTextContent
    StreamingTextContent <|-- OpenAIStreamingTextContent
    StreamingContentBase <|-- StreamingChatMessageContent
    StreamingChatMessageContent <|-- OpenAIStreamingChatMessageContent
    StreamingChatMessageContent <|-- AzureOpenAIWithDataStreamingChatMessageContent
    ChatHistory <|-- OpenAIChatHistory
    ChatMessageContent <-- ChatMessageContentItem
    ChatMessageContentItem <|-- ChatMessageTextContentItem
    ChatMessageContentItem <|-- ChatMessageImageContentItem
