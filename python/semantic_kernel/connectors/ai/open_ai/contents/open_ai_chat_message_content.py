# Copyright (c) Microsoft. All rights reserved.
from __future__ import annotations

from typing import Any, List, Literal, Optional

from pydantic import field_validator

from semantic_kernel.connectors.ai.open_ai.contents.function_call import FunctionCall
from semantic_kernel.connectors.ai.open_ai.contents.tool_calls import ToolCall
from semantic_kernel.contents import ChatMessageContent
from semantic_kernel.contents.const import OPENAI_CHAT_MESSAGE_CONTENT


class OpenAIChatMessageContent(ChatMessageContent):
    """This is the class for OpenAI chat message response content.

    Args:
        inner_content: ChatCompletion - The inner content of the response,
            this should hold all the information from the response so even
            when not creating a subclass a developer can leverage the full thing.
        ai_model_id: str | None - The id of the AI model that generated this response.
        metadata: dict[str, Any] - Any metadata that should be attached to the response.
        role: ChatRole - The role of the chat message.
        content: str | None - The text of the response.
        encoding: str | None - The encoding of the text.
        function_call: FunctionCall | None - The function call that was generated by this response.
        tool_calls: list[ToolCall] | None - The tool calls that were generated by this response.

    Methods:
        __str__: Returns the content of the response.
    """

    type: Literal[OPENAI_CHAT_MESSAGE_CONTENT] = OPENAI_CHAT_MESSAGE_CONTENT  # type: ignore
    function_call: FunctionCall | None = None
    tool_calls: list[ToolCall] | None = None
    tool_call_id: str | None = None

    @field_validator("tool_calls", mode="before")
    @classmethod
    def _validate_tool_calls(cls, tool_calls: Any) -> Optional[List[ToolCall]]:
        if not tool_calls:
            return None
        if isinstance(tool_calls, list):
            for index, call in enumerate(tool_calls):
                if not isinstance(call, ToolCall):
                    tool_calls[index] = ToolCall.model_validate_json(call)
            return tool_calls
        if isinstance(tool_calls, str):
            return [ToolCall.model_validate_json(call) for call in tool_calls.split("|")]

    @field_validator("function_call", mode="before")
    @classmethod
    def _validate_function_call(cls, function_call: Any) -> Optional[FunctionCall]:
        if not function_call:
            return None
        if isinstance(function_call, FunctionCall):
            return function_call
        return FunctionCall.model_validate_json(function_call)

    @staticmethod
    def ToolIdProperty():
        # Directly using the class name and the attribute name as strings
        return f"{ToolCall.__name__}.{ToolCall.id.__name__}"
