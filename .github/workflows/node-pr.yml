# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: node-pr

on:
  workflow_dispatch:
  pull_request:
    branches: ["main"]
    paths:
      - 'samples/apps/**'

jobs:
  find-yarn-projects:
    runs-on: ubuntu-latest
    outputs:
      yarnfolders: ${{ steps.set-yarn-folders.outputs.yarnfolders }}

    steps:
      - uses: actions/checkout@v3

      - name: Find yarn projects
        # This step uses a bash script to find all subfolders of /samples that contain a yarn.lock file
        run: |
          #!/bin/bash
          set -e # exit with nonzero exit code if anything fails
          shopt -s globstar # enable globstar option to use ** for recursive matching
          for lockfile in samples/apps/**/yarn.lock; do # loop over all yarn.lock files
            dir=$(dirname "$lockfile") # get the directory of the lock file
            echo "Found yarn project in $dir"
            yarnfolders+=("$dir") # add the directory to the yarn-folders array
          done
          
      - id: set-yarn-folders
        run: echo "::set-output name=yarn-folders::'[${yarnfolders[@]}]'"

  
  build:
    runs-on: ubuntu-latest
    needs: find-yarn-projects

    strategy:
      matrix:
        yarn-folders: ${{ fromJson(needs.setup-matrix.outputs.yarnfolders) }}
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
        
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"
          cache-dependency-path: 'samples/apps/**/yarn.lock'

      - name: Run yarn install & yarn build
        # This step runs yarn install and yarn build for each project.
        # The --frozen-lockfile option ensures that the dependencies are installed exactly as specified in the lock file.
        # The -cwd option sets the current working directory to the folder where the yarn.lock file is located.
        run: |
          #!/bin/bash
          set -e # exit with nonzero exit code if anything fails
            dir=$(dirname ${{ matrix.project-folder }}) # get the directory of the lock file
            echo "Running yarn install and yarn build for $dir"
            yarn --cwd "$dir" install --frozen-lockfile # install dependencies
            yarn --cwd "$dir" build # run build script
          done
