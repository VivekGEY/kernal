// Copyright (c) Microsoft. All rights reserved.

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace Microsoft.SemanticKernel.AI.TextCompletion;

/// <summary>
/// Interface for text completion services
/// </summary>
public interface ITextCompletion
{
    public Task<IReadOnlyList<ITextCompletionResult>> GetCompletionsAsync(
        string text,
        CompleteRequestSettings requestSettings,
        CancellationToken cancellationToken = default);

    public IAsyncEnumerable<ITextCompletionStreamingResult> GetStreamingCompletionsAsync(
        string text,
        CompleteRequestSettings requestSettings,
        CancellationToken cancellationToken = default);
}

public static class TextCompletionExtensions
{
    /// <summary>
    /// Creates a completion for the prompt and settings.
    /// </summary>
    /// <param name="textCompletion">Target interface to extend</param>
    /// <param name="text">The prompt to complete.</param>
    /// <param name="requestSettings">Request settings for the completion API</param>
    /// <param name="cancellationToken">The <see cref="CancellationToken"/> to monitor for cancellation requests. The default is <see cref="CancellationToken.None"/>.</param>
    /// <returns>Text generated by the remote model</returns>
    public static async Task<string> CompleteAsync(this ITextCompletion textCompletion,
        string text,
        CompleteRequestSettings requestSettings,
        CancellationToken cancellationToken = default)
    {
        var completions = await textCompletion.GetCompletionsAsync(text, requestSettings, cancellationToken).ConfigureAwait(false);

        if (completions.Count == 0)
        {
            throw new AIException(AIException.ErrorCodes.InvalidResponseContent, "No completion result");
        }

        if (completions.Count > 1)
        {
            throw new NotSupportedException($"{nameof(CompleteAsync)} don't support multiple completions results. Use {nameof(ITextCompletion.GetCompletionsAsync)} instead.");
        }

        // Returns the first completion result
        return await completions[0].CompleteAsync(cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// Creates a completion for the prompt and settings.
    /// </summary>
    /// <param name="textCompletion">Target interface to extend</param>
    /// <param name="text">The prompt to complete.</param>
    /// <param name="requestSettings">Request settings for the completion API</param>
    /// <param name="cancellationToken">The <see cref="CancellationToken"/> to monitor for cancellation requests. The default is <see cref="CancellationToken.None"/>.</param>
    /// <returns>Streaming content of the text generated by the remote model</returns>
    public static async IAsyncEnumerable<string> CompleteStreamAsync(this ITextCompletion textCompletion,
        string text,
        CompleteRequestSettings requestSettings,
        [EnumeratorCancellation] CancellationToken cancellationToken = default)
    {
        var completionResults = textCompletion.GetStreamingCompletionsAsync(text, requestSettings, cancellationToken).ConfigureAwait(false);

        await foreach (var completionResult in completionResults)
        {
            await foreach (var word in completionResult.CompleteStreamAsync(cancellationToken))
            {
                yield return word;
            }

            yield return Environment.NewLine;
        }
    }
}
