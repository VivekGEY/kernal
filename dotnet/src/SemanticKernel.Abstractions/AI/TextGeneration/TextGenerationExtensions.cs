// Copyright (c) Microsoft. All rights reserved.

using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Microsoft.SemanticKernel.AI.TextGeneration;

/// <summary>
/// Class sponsor that holds extension methods for <see cref ="ITextGeneration" /> interface.
/// </summary>
public static class TextGenerationExtensions
{
    /// <summary>
    /// Creates a completion for the prompt and settings.
    /// </summary>
    /// <param name="textGeneration">Target interface to extend</param>
    /// <param name="text">The prompt to complete.</param>
    /// <param name="executionSettings">Request settings for the completion API</param>
    /// <param name="kernel">The <see cref="Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
    /// <param name="cancellationToken">The <see cref="CancellationToken"/> to monitor for cancellation requests. The default is <see cref="CancellationToken.None"/>.</param>
    /// <remarks>This extension does not support multiple prompt results (Only the first will be returned)</remarks>
    /// <returns>Text generated by the remote model</returns>
    public static async Task<string> CompleteAsync(this ITextGeneration textGeneration,
        string text,
        PromptExecutionSettings? executionSettings = null,
        Kernel? kernel = null,
        CancellationToken cancellationToken = default)
    {
        var completions = await textGeneration.GetCompletionsAsync(text, executionSettings, kernel, cancellationToken).ConfigureAwait(false);
        var firstResult = completions[0];

        return await firstResult.GetCompletionAsync(cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// Get streaming completion results for the prompt and settings.
    /// </summary>
    /// <param name="textGeneration">Target text generation</param>
    /// <param name="input">The prompt to complete.</param>
    /// <param name="executionSettings">Request settings for the completion API</param>
    /// <param name="kernel">The <see cref="Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
    /// <param name="cancellationToken">The <see cref="CancellationToken"/> to monitor for cancellation requests. The default is <see cref="CancellationToken.None"/>.</param>
    /// <returns>Streaming list of different completion streaming result updates generated by the remote model</returns>
    public static IAsyncEnumerable<StreamingContent> GetStreamingContentAsync(
        this ITextGeneration textGeneration,
        string input,
        PromptExecutionSettings? executionSettings = null,
        Kernel? kernel = null,
        CancellationToken cancellationToken = default)
        => textGeneration.GetStreamingContentAsync<StreamingContent>(input, executionSettings, kernel, cancellationToken);
}
