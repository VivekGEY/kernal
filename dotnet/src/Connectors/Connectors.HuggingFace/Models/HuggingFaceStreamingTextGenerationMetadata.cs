// Copyright (c) Microsoft. All rights reserved.

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Microsoft.SemanticKernel.Connectors.HuggingFace;

/// <summary>
/// Represents the metadata of a Hugging Face chat completion.
/// </summary>
public sealed class HuggingFaceStreamingTextGenerationMetadata : ReadOnlyDictionary<string, object?>
{
    internal HuggingFaceStreamingTextGenerationMetadata() : base(new Dictionary<string, object?>()) { }

    private HuggingFaceStreamingTextGenerationMetadata(IDictionary<string, object?> dictionary) : base(dictionary) { }

    /// <summary>
    /// Index of the chunk
    /// </summary>
    public int Index
    {
        get => this.GetValueFromDictionary(nameof(this.Index)) as int? ?? 0;
        internal init => this.SetValueInDictionary(value, nameof(this.Index));
    }

    /// <summary>
    /// Special flag
    /// </summary>
    public bool? Special
    {
        get => this.GetValueFromDictionary(nameof(this.Special)) as bool? ?? false;
        internal init => this.SetValueInDictionary(value, nameof(this.Special));
    }

    /// <summary>
    /// The log probabilities of the completion.
    /// </summary>
    public double? LogProb
    {
        get => this.GetValueFromDictionary(nameof(this.LogProb)) as double? ?? 0;
        internal init => this.SetValueInDictionary(value, nameof(this.LogProb));
    }

    /// <summary>
    /// Text generated by the model.
    /// </summary>
    public string? GeneratedText
    {
        get => this.GetValueFromDictionary(nameof(this.GeneratedText)) as string;
        internal init => this.SetValueInDictionary(value, nameof(this.GeneratedText));
    }

    public string? Details

    /// <summary>
    /// Converts a dictionary to a <see cref="HuggingFaceChatCompletionMetadata"/> object.
    /// </summary>
    public static HuggingFaceStreamingTextGenerationMetadata FromDictionary(IReadOnlyDictionary<string, object?> dictionary) => dictionary switch
    {
        null => throw new ArgumentNullException(nameof(dictionary)),
        HuggingFaceStreamingTextGenerationMetadata metadata => metadata,
        IDictionary<string, object?> metadata => new HuggingFaceStreamingTextGenerationMetadata(metadata),
        _ => new HuggingFaceStreamingTextGenerationMetadata(dictionary.ToDictionary(pair => pair.Key, pair => pair.Value))
    };

    private void SetValueInDictionary(object? value, string propertyName)
        => this.Dictionary[propertyName] = value;

    private object? GetValueFromDictionary(string propertyName)
        => this.Dictionary.TryGetValue(propertyName, out var value) ? value : null;
}
