// Copyright (c) Microsoft. All rights reserved.

using System.Collections.Generic;
using Azure.AI.OpenAI;
using Microsoft.SemanticKernel.AI.ChatCompletion;

namespace Microsoft.SemanticKernel.Connectors.AI.OpenAI;

/// <summary>
/// OpenAI specialized chat content
/// </summary>
public class OpenAIChatContent : ChatContent
{
    private readonly Azure.AI.OpenAI.ChatMessage _chatMessage;

    /// <summary>
    /// Initializes a new instance of the <see cref="OpenAIChatContent"/> class.
    /// </summary>
    /// <param name="chatMessage">Azure SDK chat message</param>
    /// <param name="metadata">Additional metadata</param>
    public OpenAIChatContent(Azure.AI.OpenAI.ChatMessage chatMessage, Dictionary<string, object>? metadata = null)
        : base(new AuthorRole(chatMessage.Role.ToString()), chatMessage.Content, chatMessage, metadata)
    {
        this.FunctionCall = chatMessage.FunctionCall;
        this.Name = chatMessage.Name;
        this._chatMessage = chatMessage;
    }

    /// <summary>
    /// The name and arguments of a function that should be called, as generated by the model
    /// </summary>
    public FunctionCall FunctionCall { get; set; }

    /// <summary>
    /// The name of the author of this message. `name` is required if role is `function`,
    /// and it should be the name of the function whose response is in the `content`.
    /// May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// Retrieve the resulting function from the chat result.
    /// </summary>
    /// <returns>The <see cref="OpenAIFunctionResponse"/>, or null if no function was returned by the model.</returns>
    public OpenAIFunctionResponse? GetOpenAIFunctionResponse()
    {
        OpenAIFunctionResponse? functionResponse = null;
        var functionCall = this._chatMessage.FunctionCall;
        if (functionCall is not null)
        {
            functionResponse = OpenAIFunctionResponse.FromFunctionCall(functionCall);
        }
        return functionResponse;
    }
}
